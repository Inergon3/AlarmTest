from fastapi import FastAPI, HTTPException

app = FastAPI()

# alarms = []

@app.get("/alarm/{alarm_id}")
def get_alarm(alarm_id: int):
    alarms = session.query()
    if alarms == []:
        return {"message": "Список пуст"}
    for current_alarm in alarms:
        if current_alarm["id"] == alarm_id:
            return current_alarm
    raise HTTPException(status_code=404, detail="Будильник не найден")


@app.post("/alarm/add/{alarm_id}")
def add_alarm(alarm_id: int, time: str):
    for current_alarm in alarms:
        if current_alarm["id"] == alarm_id:
            raise HTTPException(status_code=409, detail="Будильник уже существует")
    alarms.append({"id": alarm_id, "time": time})
    return {"message": "Будильник добавлен", "alarms": alarms}


@app.get("/alarm")
def get_all_alarm():
    if alarms == []:
        return {"message": "Список пуст"}
    return alarms


@app.put("/alarm/edit/{alarm_id}")
def edit_alarm(alarm_id: int, time: str):
    for current_alarm in alarms:
        if current_alarm["id"] == alarm_id:
            current_alarm["time"] = time
            return {"message": "Будильник обновлен"}
    raise HTTPException(status_code=404, detail="Будильник не найден")


@app.get("/")
def hello():
    return "Hello"


@app.delete("/alarm/all_remove")
def all_remove():
    global alarms
    alarms = []
    return alarms


@app.delete("/alarm/remove/{alarm_id}")
def remove_alarm_id(alarm_id: int):
    for current_alarm in alarms:
        if current_alarm["id"] == alarm_id:
            alarms.remove(current_alarm)
            return {"message": "Пользователь удален"}
    raise HTTPException(status_code=404, detail="Пользователь не найден")
